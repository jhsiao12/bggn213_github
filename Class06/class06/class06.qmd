---
title: "Class 06: R Functions"
author: "Jason Hsiao (PID: A15871650)"
format: pdf
---

Every function in R has at least 3 things:
1) Name
2) Arguments (input(s) to your function)
3) The body

## Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90).  
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80).  
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA).  

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

```
## Student 1 Average
```{r}
mean(student1)

```

Minimum Grade for Student 1
```{r}
min(student1)

```
Using `which.min` to determine vector position of minimum
```{r}
which.min(student1)

```

Using `which.min` to remove lowest score
```{r}
student1_grade <- mean(student1[-which.min(student1)])
student1_grade
```
What about for student 2?
```{r}
x <- student2
student2_grade <- mean(x[-which.min(x)], na.rm = TRUE)
student2_grade

```

Let's set it so that if you don't submit an assignment you get zero points:
```{r}
student2[is.na(student2)] <- 0
student2

```
Putting it all together
```{r}
x <- student3
#Masking NA to zero
x[is.na(x)] <- 0
#Find the mean dropping the lowest score
mean(x[-which.min(x)], na.rm = TRUE)


```

> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

Turn this snippet into a function
```{r}
grade <- function(x) {
  x[is.na(x)] <- 0
  mean(x[-which.min(x)], na.rm = TRUE)
}

```

Using the above function to grade any student
```{r}
grade(student1)
grade(student2)
grade(student3)
```

Making a slightly different grading scheme so that student fails if they fail to submit 2 or more assignments: 
```{r}
library(dplyr)
y <- student3

score <- function(y) {
  x <- sum(is.na(y)) >= 2
  if(x == TRUE) {print("FAIL!")}
  if(x == FALSE) {print(mean(y[-which.min(y)], na.rm = TRUE)) } 
}

score(y)

```

I need to read the gradebook CSV file
```{r}
gradebook <- read.csv("student_homework.csv", row.names = 1)
#Setting NA = 0
gradebook[is.na(gradebook)] <- 0
gradebook
```
A very useful function that Barry is forcing us to use here is the `apply()` function. How do we user it to take our `grade()` function and apply it over the full gradebook?
```{r}
ans <- apply(gradebook, 1, grade)
ans
```
> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

##Top Scoring Student
```{r}
which.max(ans)

```

> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

##Toughest Homework
```{r}
which.min(apply(gradebook, 2, mean, na.rm = TRUE))

```

> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

Take the `apply()` function and the `cor()` function and run over our whole gradebook
```{r}
which.max(apply(gradebook, 2, cor, ans))

```

